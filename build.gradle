plugins {
    id 'org.ajoberstar.reckon' version '0.7.0'
    id 'org.ajoberstar.grgit' version '2.2.1'
}
apply plugin: 'maven'
apply plugin: 'java-library'
apply plugin: 'eclipse'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'

group 'net.minecraftforge'

sourceCompatibility = 1.8
targetCompatibility = 1.8

jacoco {
    toolVersion = "0.8.1"
}

reckon {
    scopeFromProp()
    stageFromProp('milestone', 'rc', 'final')
}

reckonTagCreate.dependsOn check

test {
    useJUnitPlatform()
    forkEvery 1
}

sourceSets {
    mlservice
    testJars
}


ext.sharedManifest = manifest {
    attributes(["Specification-Title": "eventbus",
                "Specification-Vendor": "Forge",
                "Specification-Version": "1", // Currently version 1 of the eventbus specification
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}+${System.getenv("BUILD_NUMBER")?:0}+${grgit.head().getAbbreviatedId(8)}",
                "Implementation-Vendor" :"Forge",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "Git-Commit": grgit.head().getAbbreviatedId(8),
                "Git-Branch": grgit.branch.current().getName() ],
            "net/minecraftforge/eventbus/service/")
}

task mlserviceJar(type: Jar) {
    classifier = 'service'
    from sourceSets.main.output
    from sourceSets.mlservice.output
    manifest = project.manifest {
        from sharedManifest
    }
}

jar {
    manifest = project.manifest {
        from sharedManifest
    }
}

task testsJar(type: Jar) {
    classifier = 'testsjar'
    from sourceSets.testJars.output
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
    from sourceSets.mlservice.allSource
}


build.dependsOn mlserviceJar

repositories {
    mavenCentral()
    maven {
        name = "forge"
        url = "http://files.minecraftforge.net/maven"
    }
}

dependencies {
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.2.+")
    testImplementation("org.powermock:powermock-core:1.7.+")
    testImplementation("cpw.mods:modlauncher:0.1+")
    testImplementation(sourceSets.mlservice.output)
    testImplementation("org.junit.jupiter:junit-jupiter-engine:5.2.+")
    testImplementation("org.apache.logging.log4j:log4j-core:2.11.+")
    testImplementation(sourceSets.testJars.runtimeClasspath)
    testImplementation(sourceSets.mlservice.output)
    testJarsImplementation(sourceSets.main.output)
    implementation("org.ow2.asm:asm:6.2")
    implementation("org.ow2.asm:asm-commons:6.2")
    implementation("org.ow2.asm:asm-tree:6.2")
    implementation("org.apache.logging.log4j:log4j-api:2.11.+")
    implementation("cpw.mods:modlauncher:0.1+:api")
    api("net.jodah:typetools:0.5.0")
    mlserviceImplementation("cpw.mods:modlauncher:0.1+:api")
    mlserviceImplementation(sourceSets.main.output)
}

artifacts {
    archives jar
    archives sourcesJar
    archives testsJar
    archives mlserviceJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact mlserviceJar
            pom {
                name = 'Event Bus'
                description = 'High performance Event Bus library'
                url = 'https://github.com/cpw/eventbus'
                scm {
                    url = 'https://github.com/cpw/eventbus'
                    connection = 'scm:git:git://github.com/cpw/eventbus.git'
                    developerConnection = 'scm:git:git@github.com:cpw/eventbus.git'
                }
                issueManagement {
                    system = 'github'
                    url = 'https://github.com/cpw/eventbus/issues'
                }

                licenses {
                    license {
                        name = 'LGPLv2.1'
                        url = 'https://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt'
                    }
                }

                developers {
                    developer {
                        id = 'cpw'
                        name = 'cpw'
                    }
                    developer {
                        id = 'LexManos'
                        name = 'LexManos'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            credentials {
                username project.properties.forgeMavenUser?:'fake'
                password project.properties.forgeMavenPassword?:'news'
            }
            url "http://files.minecraftforge.net/maven/manage/upload"
        }
    }
}